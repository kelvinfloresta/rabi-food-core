// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	tenant_gateway "rabi-food-core/libs/database/gateways/tenant_gateway"

	mock "github.com/stretchr/testify/mock"
)

// TenantGateway is an autogenerated mock type for the TenantGateway type
type TenantGateway struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *TenantGateway) Create(input tenant_gateway.CreateInput) (string, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(tenant_gateway.CreateInput) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(tenant_gateway.CreateInput) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(tenant_gateway.CreateInput) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TenantGateway) GetByID(id string) (*tenant_gateway.GetByIDOutput, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *tenant_gateway.GetByIDOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*tenant_gateway.GetByIDOutput, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *tenant_gateway.GetByIDOutput); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant_gateway.GetByIDOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: filter, values
func (_m *TenantGateway) Patch(filter tenant_gateway.PatchFilter, values tenant_gateway.PatchValues) (bool, error) {
	ret := _m.Called(filter, values)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(tenant_gateway.PatchFilter, tenant_gateway.PatchValues) (bool, error)); ok {
		return rf(filter, values)
	}
	if rf, ok := ret.Get(0).(func(tenant_gateway.PatchFilter, tenant_gateway.PatchValues) bool); ok {
		r0 = rf(filter, values)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(tenant_gateway.PatchFilter, tenant_gateway.PatchValues) error); ok {
		r1 = rf(filter, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantGateway creates a new instance of TenantGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantGateway {
	mock := &TenantGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
